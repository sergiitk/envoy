syntax = "proto3";

package envoy.type.matcher.v3;

import "envoy/type/v3/cel.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.type.matcher.v3";
option java_outer_classname = "HttpInputsProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3;matcherv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Common HTTP Inputs]

// Match input indicates that matching should be done on a specific request header.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.request_headers]
message HttpRequestHeaderMatchInput {
  // The request header to match on.
  string header_name = 1
      [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME strict: false}];
}

// Match input indicates that matching should be done on a specific request trailer.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.request_trailers]
message HttpRequestTrailerMatchInput {
  // The request trailer to match on.
  string header_name = 1
      [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME strict: false}];
}

// Match input indicating that matching should be done on a specific response header.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the response contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.response_headers]
message HttpResponseHeaderMatchInput {
  // The response header to match on.
  string header_name = 1
      [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME strict: false}];
}

// Match input indicates that matching should be done on a specific response trailer.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.response_trailers]
message HttpResponseTrailerMatchInput {
  // The response trailer to match on.
  string header_name = 1
      [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME strict: false}];
}

// Specifies that matching will be performed on the set of :ref:`HTTP attributes
// <arch_overview_attributes>` using `Common Expression Language
// <https://github.com/google/cel-spec>`_ (CEL) expression.
//
// The resulting input is the result of evaluating the CEL program. The result should be one of the
// supported types. Refer to the following table for the supported CEL result types, and known
// compatible matchers.
//
// .. list-table::
//   :widths: 25 75
//   :header-rows: 1
//
//   * - CEL result type
//     - Compatible Matchers
//   * - ``string``
//     - :ref:`StringMatcher <envoy_v3_api_msg_.xds.type.matcher.v3.StringMatcher>`
//   * - ``bool``
//     - TBD
//
// Refer to :ref:`Unified Matcher API <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>` documentation
// for usage details.
//
// .. attention::
//
//   In case CEL expression raises an error, the result of the evaluation is interpreted
//   short-circuited "no match". Associated Matcher is not evaluated.
//
// [#extension: envoy.matching.inputs.http_attributes]
message HttpAttributesCelMatchInput {
  // CEL expression to evaluate.
  type.v3.CelExpression expr = 1 [(validate.rules).message = {required: true}];
}
