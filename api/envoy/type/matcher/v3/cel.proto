syntax = "proto3";

package envoy.type.matcher.v3;

import "google/api/expr/v1alpha1/checked.proto";
import "google/api/expr/v1alpha1/syntax.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.type.matcher.v3";
option java_outer_classname = "CelProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3;matcherv3";
option (udpa.annotations.file_status).package_version_status = FROZEN;

// [#protodoc-title: Common Expression Language matcher]

// Performs a match by evaluating a CEL expression against the standardized set of
// :ref:`HTTP attributes <arch_overview_attributes>` specified via HttpCelMatchInput.
// The match is ``true``, iff the result of the evaluation is a bool AND true.
// In all other cases, the match is ``false``, including but not limited to: non-bool types, false,
// null, int(1), etc.
message CelMatcher {
  CelExpression match_expression = 1 [(validate.rules).message = {required: true}];
}

// TODO(sergiitk): docs, extension category
// Must return string...
message CelSelector {
  CelExpression select_expression = 1 [(validate.rules).message = {required: true}];
}

// TODO(sergiitk): at least one of?
message CelExpression {
  // CEL expression in a text form.
  string expr_raw = 1;

  // Parsed expression in abstract syntax tree (AST) form.
  google.api.expr.v1alpha1.Expr expr_parsed = 2;

  // Parsed expression in abstract syntax tree (AST) form that has been successfully type checked.
  google.api.expr.v1alpha1.CheckedExpr expr_type_checked = 3;
}
