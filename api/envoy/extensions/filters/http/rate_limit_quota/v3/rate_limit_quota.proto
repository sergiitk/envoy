syntax = "proto3";

package envoy.extensions.filters.http.rate_limit_quota.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/config/core/v3/config_source.proto";
import "envoy/config/core/v3/extension.proto";
import "envoy/type/v3/http_status.proto";
import "envoy/type/v3/ratelimit_strategy.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

import "xds/type/matcher/v3/matcher.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3";
option java_outer_classname = "RateLimitQuotaProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/rate_limit_quota/v3;rate_limit_quotav3";
option (udpa.annotations.file_status).package_version_status = FROZEN;

// [#protodoc-title: Rate Limit Quota]
// Rate limit :ref:`configuration overview <config_http_filters_rate_limit_quota>`.
// [#extension: envoy.filters.http.rate_limit_quota]

message RateLimitQuotaFilterConfig {
  // [#comment:TODO(sergiitk): preview mode matchers]

  // Configuration for the gRPC service that hosts an external rate limit
  // provider. If not specified, any calls to the rate limit service will
  // immediately return success.
  config.core.v3.ConfigSource rlqs_server = 1;

  // The application domain to use when calling the service.
  string domain = 2;

  // Unified matchers.
  xds.type.matcher.v3.Matcher bucket_matchers = 3;
}

// [#next-free-field: 6]
message RateLimitQuotaBucketSettings {
  // Configures the behavior when the first request has been matched to
  // the bucket, and the data plane is waiting for the RLQS to return the
  // first quota assignment.
  message NoAssignmentBehavior {
    oneof behavior {
      option (validate.required) = true;

      // Allow or Deny the requests until the bucket is assigned a quota.
      // If unset, allow all.
      type.v3.RateLimitStrategy.BlanketRule blanket_rule = 1;

      // Queue the requests until the bucket is assigned a quota.
      // The data plane maintains a separate queue for each bucket that has
      // pending requests.
      // When the server returns quota assignment, the data plane begins
      // dequeuing the requests in the FIFO order, and processing them according
      // to the assignment. No individual request/response matching needed.
      //
      // .. note::
      //   To avoid memory exhaust, queue configuration allows to
      //   to impose constraints on the maximum number of pending requests
      //   in the queue, and choose what to do with the request over the limit.
      type.v3.RateLimitStrategyQueue queue_requests = 2;
    }
  }

  // Specifies the behavior when the bucket's assignment has expired, and
  // hasn't been refreshed due to server's unavailability.
  message ExpiredAssignmentBehavior {
    message FallbackLastAssignment {
      // Limit the time the last assignment is used as a fallback.
      // [#comment:TODO(sergiitk): what to do after that?]
      google.protobuf.Duration time_to_live = 1;
    }

    oneof behavior {
      option (validate.required) = true;

      // Pre-configured local rate limit strategy.
      type.v3.RateLimitStrategy fallback_rate_limit = 1;

      // Reuse last quota assignment associated to the bucket.
      FallbackLastAssignment fallback_last_assignment = 2;
    }
  }

  // Customize the deny response to the requests over the rate limit.
  message DenyResponseSettings {
    // HTTP response code for denying non-gRPC HTTP requests.
    // Defaults to 429 (:ref:`StatusCode.TooManyRequests<envoy_v3_api_enum_value_type.v3.StatusCode.TooManyRequests>`).
    type.v3.HttpStatus http_status = 1;

    // HTTP response body used for denying non-gRPC HTTP requests.
    // If not set, an empty body is returned.
    google.protobuf.BytesValue http_body = 2;

    // Specifies the `RPC code
    // <https://cloud.google.com/natural-language/docs/reference/rpc/google.rpc#google.rpc.Code>`_
    // and the message used when denying over-the-limit gRPC requests.
    // Defaults to the Status with the RPC Code ``UNAVAILABLE`` and empty message.
    //
    // .. note::
    //   The HTTP code for a gRPC response is always 200.
    google.rpc.Status grpc_status = 3;

    // Specifies a list of HTTP headers that should be added to each response for requests that
    // have been rate limited. Applies both to plain HTTP, and gRPC requests.
    repeated config.core.v3.HeaderValueOption response_headers_to_add = 4
        [(validate.rules).repeated = {max_items: 10}];
  }

  // ``BucketIdBuilder`` makes it possible to build :ref:`BucketId
  // <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>` with values substituted
  // from the dynamic properties associated with each individual request. See usage examples in
  // the docs to :ref:`bucket_id_builder
  // <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.bucket_id_builder>`
  // field.
  message BucketIdBuilder {
    // Produces the value of the :ref:`BucketId
    // <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>` map.
    message ValueBuilder {
      oneof value_specifier {
        option (validate.required) = true;

        // Static string value — becomes the value in the :ref:`BucketId
        // <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>` map as is.
        string string_value = 1;

        // Dynamic value — evaluated for each request. Must produce a string output, which becomes
        // the value in the :ref:`BucketId <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>`
        // map.
        // [#extension-category: envoy.matching.http.input]
        config.core.v3.TypedExtensionConfig custom_value = 2;
      }
    }

    // The map translated into the ``BucketId`` map.
    //
    // The ``string key`` of this map and becomes the key of ``BucketId`` map as is.
    //
    // The ``ValueBuilder value`` for the key can be:
    //
    // * static ``StringValue string_value`` — becomes the value in the ``BucketId`` map as is.
    // * dynamic ``TypedExtensionConfig custom_value`` — evaluated for each request. Must produce
    //   a string output, which becomes the value in the the ``BucketId`` map.
    //
    // See usage examples in the docs to :ref:`bucket_id_builder
    // <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.bucket_id_builder>`
    // field.
    map<string, ValueBuilder> bucket_id_builder = 1;
  }

  // ``BucketId`` builder.
  //
  // :ref:`BucketId <envoy_v3_api_msg_service.rate_limit_quota.v3.BucketId>` is a map from
  // the string key to the string value which serves as bucket identifier common for on
  // the control plane and the data plane.
  //
  // While ``BucketId`` is always static, ``BucketIdBuilder`` allows to populate map values
  // with the dynamic properties associated with the each individual request.
  //
  // Example 1: static fields only
  //
  // ``BucketIdBuilder``:
  //
  // .. validated-code-block:: yaml
  //   :type-name: envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.BucketIdBuilder
  //
  //   bucket_id_builder:
  //     name:
  //       string_value: my_bucket
  //     hello:
  //       string_value: world
  //
  // Produces the following ``BucketId`` for all requests:
  //
  // .. validated-code-block:: yaml
  //   :type-name: envoy.service.rate_limit_quota.v3.BucketId
  //
  //   bucket:
  //     name: my_bucket
  //     hello: world
  //
  // Example 2: static and dynamic fields
  //
  // .. validated-code-block:: yaml
  //   :type-name: envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.BucketIdBuilder
  //
  //   bucket_id_builder:
  //     name:
  //       string_value: my_bucket
  //     env:
  //       custom_value:
  //         typed_config:
  //           '@type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
  //           header_name: environment
  //
  // In this example, the value of ``BucketId`` key ``env`` is substituted from the ``environment``
  // request header.
  //
  // For the request with the HTTP header ``env`` set to ``staging``, the builder will produce
  // the following ``BucketId``:
  //
  // .. validated-code-block:: yaml
  //   :type-name: envoy.service.rate_limit_quota.v3.BucketId
  //
  //   bucket:
  //     name: my_bucket
  //     env: staging
  //
  // For the request with the HTTP header ``environment`` set to ``prod``, will produce:
  //
  // .. validated-code-block:: yaml
  //   :type-name: envoy.service.rate_limit_quota.v3.BucketId
  //
  //   bucket:
  //     name: my_bucket
  //     env: prod
  //
  BucketIdBuilder bucket_id_builder = 1;

  // The interval at which the data plane is to report quota usage for
  // this bucket.
  // When the first request is matched to a bucket without an active
  // assignment, the data plane immediately sends RateLimitQuotaUsageReports
  // to the server, signaling it's subscribed for the quota assignments
  // in that bucket. After that, the data plane is to submit the report
  // with the given reporting internal.
  // [#comment:nanos to seconds = 0.001 seconds]
  google.protobuf.Duration reporting_interval = 2 [(validate.rules).duration = {
    required: true
    gt {nanos: 1000000}
  }];

  // Customize the deny response to the requests over the rate limit.
  // If not set, the filter will be configured as if an empty message is set,
  // and will behave according to the defaults specified in :ref:`DenyResponseSettings
  // <envoy_v3_api_msg_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.DenyResponseSettings>`.
  DenyResponseSettings deny_response_settings = 3;

  // How the data plane should treat requests matched into this bucket
  // while waiting for the first assignment returned by the RLQS server.
  // When unset, the default behavior is to allow all requests.
  NoAssignmentBehavior no_assignment_behavior = 4;

  // Specifies a behavior when the bucket's assignment has expired, and
  // hasn't been refresh due to server's unavailability.
  ExpiredAssignmentBehavior expired_assignment_behavior = 5;
}

message RateLimitQuotaPerRoute {
  // [#comment:TODO(sergiitk): finish]
}
