syntax = "proto3";

package envoy.service.rate_limit_quota.v3;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "xds/annotations/v3/status.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.service.rate_limit_quota.v3";
option java_outer_classname = "RlqsProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/service/rate_limit_quota/v3;rate_limit_quotav3";
option java_generic_services = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#not-implemented-hide:]
// [#protodoc-title: Rate Limit Quota Service (RLQS)]

service RateLimitQuotaService {
  rpc StreamRateLimitQuotas(stream RateLimitQuotaUsageReport)
      returns (stream RateLimitQuotaAssignments) {
  }
}

message RateLimitQuotaUsageReport {
  // [#next-free-field: 7]
  message GroupQuotaUsage {
    // The name of the group.
    string group_name = 1;

    // Subgroup key.
    string subgroup_key = 2;

    // Time elapsed since the last report.
    google.protobuf.Duration time_elapsed = 3;

    // Requests the data plane has allowed through.
    uint64 num_requests_allowed = 4;

    // Requests throttled.
    uint64 num_requests_denied = 5;

    // Requests in the queue waiting for the assignment.
    uint64 num_requests_queued = 6;
  }

  // All quota requests must specify the domain. This enables sharing the quota
  // server between different applications without fear of overlap.
  // E.g., "envoy".
  string domain = 1;

  repeated GroupQuotaUsage group_usage = 2;
}

message RateLimitQuotaAssignments {
  // [#next-free-field: 7]
  message QuotaAssignment {
    string group_name = 1;

    string subgroup_key = 2;

    // The number of requests allowed per each refill_rate interval.
    // If unset, no limit.
    // If set to 0, always throttle.
    google.protobuf.Int64Value num_requests = 3;

    // The interval at which the number of requests is reset to num_requests.
    google.protobuf.Duration refill_rate = 4;

    // The timestamp at which the server issued the quota.
    // Assignment with timestamps older than the active assignment
    // must be discarded.
    google.protobuf.Timestamp timestamp = 5;

    // A duration after which the assignment expires.
    google.protobuf.Duration time_to_live = 6;
  }

  // An ordered list of assignments to be applied to the quota groups.
  // When a quota assignments
  // is issued, and it's different from group's current assignment,
  // the data plane must immediately end the active assignment, and
  // report the usage. Exceptions:
  // - There's no active assignment for the group
  // - The only difference between the assignment in the expiration
  repeated QuotaAssignment quota_assignment = 1;
}
